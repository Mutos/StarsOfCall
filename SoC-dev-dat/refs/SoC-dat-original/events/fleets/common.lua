--[[INCLUDE SCOPE:	Utility functions for spawning eventsREVISIONS		TODO			FEATURE	: Select only friendly planets / jumppoints as origin or destination			FEATURE	: Smarter control of spawning delays			BUGFIX	: (Minor) Sometimes the event fails when exiting the game						Warning: [hook_runEvent] Hook [timer] '517' -> 'spawnFleet' failed, event does not exist. Deleting hook.		rxxx		r141			FEATURE	: added two extra parameters to setPassThroughCourse						noLand : do not select planets as origin or destination						noJump : do not select jump points as origin or destination		r82			CODE	: setPassThroughCourse()		r81			CODE	: First version, void]]---- Find and set an origin and a destination for the Convoy Leader--   faction : faction to search for suitable planets or jump points--   noLand  : inhibates search for planets--   noJump  : inhibates search for jump points-- Return : 2 systems + 2 planetsfunction setPassThroughCourse(faction, noLand, noJump)	-- Get information about the current system	local currentSystem = system.cur()	-- print (string.format("\tCurrent system : %s",currentSystem:name()))		-- If neither land nor jump, no point calling this...	if noLand and noJump then		return	end	-- Look for landable planet for taking off or landing	local currentSystemPlanets = currentSystem:planets()	-- print (string.format("\t\tPlanets (%u) :", #currentSystemPlanets))	local currentSystemLandablePlanets = {}	for key, planet in ipairs( currentSystemPlanets ) do		if planet:services()["land"] then			-- print (string.format("\t\t\t%s : landable",planet:name()))			if not noLand then				table.insert(currentSystemLandablePlanets, planet)			end		else			-- print (string.format("\t\t\t%s : not landable",planet:name()))		end	end	-- Look for all jump points	local currentSystemJumps = {}	currentSystemJumps = currentSystem:jumps()	-- print (string.format("\t\tJump Points (%u) :", #currentSystemJumps))	for k,jumpPoint in pairs(currentSystemJumps) do		-- print (string.format("\t\t\t%s",jumpPoint:dest():name()))	end	if noJump then		currentSystemJumps = {}	end		-- Check if we can find at least 1 origin and 1 destination	if #currentSystemJumps+#currentSystemLandablePlanets <= 1 then		-- print ("\tLess than 2 nav points (landable planet or jump point) : no convoy will be created")		return	end		-- Set local variables	local convoyJumpOrigin		= nil	local convoyLandOrigin		= nil	local convoyJumpDestination	= nil	local convoyLandDestination	= nil	-- Determine whether the convoy will take off or jump in	-- Remove the selected planet or jump point from its table	-- This prevents selecting the same target as origin and destination	local randomN = rnd.rnd(1,#currentSystemJumps+#currentSystemLandablePlanets)	-- print (string.format("\t\tRandom = %u in (%u Jumps + %u Planets)",randomN,#currentSystemJumps,#currentSystemLandablePlanets))	if randomN > #currentSystemJumps then		convoyJumpOrigin = nil		convoyLandOrigin = currentSystemLandablePlanets[randomN-#currentSystemJumps]		table.remove(currentSystemLandablePlanets,randomN-#currentSystemJumps)		-- print (string.format("\t\tTaking off from %s",convoyLandOrigin:name()))	else		convoyJumpOrigin = currentSystemJumps[randomN]:dest()		convoyLandOrigin = nil		table.remove(currentSystemJumps,randomN)		-- print (string.format("\t\tJumping in from %s",convoyJumpOrigin:name()))	end	-- Determine whether the convoy will land or jump out	randomN = rnd.rnd(1,#currentSystemJumps+#currentSystemLandablePlanets)	-- print (string.format("\t\tRandom = %u in (%u Jumps + %u Planets)",randomN,#currentSystemJumps,#currentSystemLandablePlanets))	if randomN > #currentSystemJumps then		convoyJumpDestination = nil		convoyLandDestination = currentSystemLandablePlanets[randomN-#currentSystemJumps]		-- print (string.format("\t\tLanding on %s",convoyLandDestination:name()))	else		convoyJumpDestination = currentSystemJumps[randomN]:dest()		convoyLandDestination = nil		-- print (string.format("\t\tJumping out to %s",convoyJumpDestination:name()))	end	-- Return to caller	return convoyJumpOrigin, convoyLandOrigin, convoyJumpDestination, convoyLandDestinationend